// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum LogLevel : NSInteger;
@class UIColor;

/**
  The Applivery’s class provides the entry point to the Applivery service.
  <h3>Usage</h3>
  You should use the \code
  sharedInstance
  \endcode property to get a unique singleton instance, then set your \code
  logLevel
  \endcode configuration and finally call to the method:
  start(apiKey apiKey: String, appId: String, appStoreRelease: Bool)
  <h3>Overview</h3>
  When Applivery’s starts, the latests configuration for your build will be retrieved, and the build version of your app will be checked. Then applivery could:
  <ol>
    <li>
      Do nothing if the app is in the latest version or any update is checked in the app configuration.
    </li>
    <li>
      Shows a cancellable alert if there is a new available update in Applivery, giving the user the chance to update to the latest build.
    </li>
    <li>
      Shows a modal screen, that user can not dismiss, with the only option to update to the latest build. This will force yours users to update giving them any chance to continue using the app.
    </li>
  </ol>
  seealso:
  <a href="https://github.com/applivery/applivery-ios-sdk/blob/master/README.md">Applivery’s README on GitHub</a>
  since:
  1.0
  version:
  2.2
  author:
  Alejandro Jiménez Agudo
  copyright:
  Applivery
*/
SWIFT_CLASS("_TtC9Applivery9Applivery")
@interface Applivery : NSObject
/**
  Singleton instance
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Applivery * _Nonnull sharedInstance;)
+ (Applivery * _Nonnull)sharedInstance;
/**
  Type of Applivery’s logs you want displayed in the debug console
  since:
  1.0
  version:
  2.0
  <ul>
    <li>
      <em>None</em>: No log will be shown. Recommended for production environments.
    </li>
    <li>
      <em>Error</em>: Only warnings and errors. Recommended for develop environments.
    </li>
    <li>
      <em>Info</em>: Errors and relevant information. Recommended for test integrating Applivery.
    </li>
    <li>
      <em>Debug</em>: Request and Responses to Applivery’s server will be displayed. Not recommended to use, only for debugging Applivery.
    </li>
  </ul>
*/
@property (nonatomic) enum LogLevel logLevel;
/**
  Sets a color for the brush on screenshot edit mode
  since:
  2.2
  version:
  2.2
*/
@property (nonatomic, strong) UIColor * _Nonnull screenshotBrushColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Starts Applivery’s framework
  <ul>
    <li>
      Parameters:
    </li>
    <li>
      apiKey: Your developer’s Api Key
    </li>
    <li>
      appId: Your application’s ID
    </li>
    <li>
      appStoreRelease: Flag to mark the build as a build that will be submitted to the AppStore. This is needed to prevent unwanted behavior like prompt to a final user that a new version is available on Applivery.
    </li>
  </ul>
  <ul>
    <li>
      True: Applivery will stop any activity. <em>Use this for AppStore</em>
    </li>
    <li>
      False: Applivery will works as normally. Use this with distributed builds in Applivery.
    </li>
  </ul>
  attention:
  Be sure that the param <em>appStoreRelease</em> is true before submitting to the AppStore
  since:
  1.0
  version:
  2.0
*/
- (void)startWithApiKey:(NSString * _Nonnull)key appId:(NSString * _Nonnull)appId appStoreRelease:(BOOL)appStoreRelease;
/**
  Disable Applivery’s feedback.
  By default, Applivery will show a feedback formulary to your users when a screenshot is detected. If you want to avoid this, you can disable it calling this method
  since:
  1.2
  version:
  2.0
*/
- (void)disableFeedback;
@end


@interface NSBundle (SWIFT_EXTENSION(Applivery))
@end

typedef SWIFT_ENUM(NSInteger, LogLevel) {
/**
  No log will be shown. Recommended for production environments.
*/
  LogLevelNone = 0,
/**
  Only warnings and errors. Recommended for develop environments.
*/
  LogLevelError = 1,
/**
  Errors and relevant information. Recommended for test integrating Applivery.
*/
  LogLevelInfo = 2,
/**
  Request and Responses to Applivery’s server will be displayed. Not recommended to use, only for debugging Applivery.
*/
  LogLevelDebug = 3,
};


@interface NSError (SWIFT_EXTENSION(Applivery))
@end


@interface UIColor (SWIFT_EXTENSION(Applivery))
@end


@interface UIColor (SWIFT_EXTENSION(Applivery))
@end


@interface UIDevice (SWIFT_EXTENSION(Applivery))
@property (nonatomic, readonly, copy) NSString * _Nonnull modelName;
@end


@interface UIFont (SWIFT_EXTENSION(Applivery))
@end


@interface UIStoryboard (SWIFT_EXTENSION(Applivery))
@end


@interface NSUserDefaults (SWIFT_EXTENSION(Applivery))
@end

#pragma clang diagnostic pop
