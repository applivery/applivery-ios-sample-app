// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum LogLevel : NSInteger;


/// The Applivery's class provides the entry point to the Applivery service.
///
/// <h3>Usage</h3>
/// You should use the <code>sharedInstance
/// </code> property to get a unique singleton instance, then set your <code>logLevel
/// </code> configuration and finally call to the method:
///
/// <code>start(apiKey apiKey: String, appId: String, appStoreRelease: Bool)
/// 
/// </code>
/// <h3>Overview</h3>
/// When Applivery's starts, the latests configuration for your build will be retrieved, and the build version of your app will be checked. Then applivery could:
///
/// <ol><li>Do nothing if the app is in the latest version or any update is checked in the app configuration.</li><li>Shows a cancellable alert if there is a new available update in Applivery, giving the user the chance to update to the latest build.</li><li>Shows a modal screen, that user can not dismiss, with the only option to update to the latest build. This will force yours users to update giving them any chance to continue using the app.</li></ol>\See 
/// <a href="https://github.com/applivery/applivery-ios-sdk/blob/master/README.md">Applivery's README on GitHub</a>\Since 
///
/// 1.0\Version 
///
/// 1.0\Author 
///
/// Alejandro Jim√©nez Agudo\Copyright 
///
/// Applivery
SWIFT_CLASS("_TtC9Applivery9Applivery")
@interface Applivery : NSObject

/// Singleton instance
+ (Applivery * __nonnull)sharedInstance;

/// Type of Applivery's logs you want displayed in the debug console
///
/// <ul><li><em>None</em>: No log will be shown. Recommended for production environments.</li><li><em>Error</em>: Only warnings and errors. Recommended for develop environments.</li><li><em>Info</em>: Errors and relevant information. Recommended for test integrating Applivery.</li><li><em>Debug</em>: Request and Responses to Applivery's server will be displayed. Not recommended to use, only for debugging Applivery.</li></ul>
@property (nonatomic) enum LogLevel logLevel;

/// Starts Applivery's framework\Attention 
///
/// Be sure that the param <em>appStoreRelease</em> is true before submitting to the AppStore\Since 
///
/// 1.0\Version 
///
/// 1.0
///
/// \param apiKey Your developer's Api Key
///
/// \param appId Your application's ID
///
/// \param appStoreRelease Flag to mark the build as a build that will be submitted to the AppStore. This is needed to prevent unwanted behavior like prompt to a final user that a new version is available on Applivery.<ul><li>True: Applivery will stop any activity. <em>Use this for AppStore</em></li><li>False: Applivery will works as normally. Use this with distributed builds in Applivery.</li></ul>
- (void)startWithApiKey:(NSString * __nonnull)apiKey appId:(NSString * __nonnull)appId appStoreRelease:(BOOL)appStoreRelease;
@end

typedef SWIFT_ENUM(NSInteger, LogLevel) {

/// No log will be shown. Recommended for production environments.
  LogLevelNone = 0,

/// Only warnings and errors. Recommended for develop environments.
  LogLevelError = 1,

/// Errors and relevant information. Recommended for test integrating Applivery.
  LogLevelInfo = 2,

/// Request and Responses to Applivery's server will be displayed. Not recommended to use, only for debugging Applivery.
  LogLevelDebug = 3,
};


@interface NSBundle (SWIFT_EXTENSION(Applivery))
@end


@interface UIFont (SWIFT_EXTENSION(Applivery))
@end

#pragma clang diagnostic pop
